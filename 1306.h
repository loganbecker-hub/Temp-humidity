#ifndef _1306_h
#define _1306_h

#include <stdint.h>

/* If defined '1' simulation will work on PROTEUS 
 * else if defined '0' real device address of OLED will be used
 */

#define PROTEUS 0

#if PROTEUS 
  #define SLAVE_ADDRESS                    0x7a // Proteus Address                                            
#else
  #define SLAVE_ADDRESS                    0x78 // Real Address of OLED
#endif

//OLED DIMENSION: Change if they are different here
#define OLED_HEIGHT                      32
#define OLED_WIDTH                       128
//Fundamental Command Table              
#define SET_CONTRAST                     0x81 // follow with contrast level(0-256) 1 byte command
#define DISPLAY_RESUME                   0xA4 
#define ENTIRE_DISPLAY_ON                0xA5 
#define NORMAL_DISPLAY                   0xA6
#define INVERSE_DISPLAY                  0XA7
#define DISPLAY_OFF                      0XAE
#define DISPLAY_ON                       0XAF
// Scrolling Command Table 
#define RIGHT_HORIZONTAL_SCROLL          0X26
#define LEFT_HORIZONTAL_SCROLL           0X27
#define VERTICAL_RIGHT_HORIZONTAL_SCROLL 0X29
#define VERTICAL_LEFT_HORIZONTAL_SCROLL  0X2A
#define SET_VERTICAL_SCROLL_AREA         0XA3
#define ACTIVATE_SCROLL                  0X2F
#define DEACTIVATE_SCROLL                0X2E
// Addressing Setting Command Table 
#define SET_LOWER_COLUMN                 0X00 // 0X00 - 0X0F
#define SET_HIGHER_COLUMN                0X10 // 0X10 - 0X1F
#define SET_MEMORY_ADDRESS               0X20
#define SET_COLUMN_START_END_ADDRESS     0X21
#define SET_PAGE_ADDRESS                 0X22
#define SET_RAM_PAGE_START_ADDRESS       0XB0
//HARDWARE CONFIGURATION
#define SET_DISPLAY_START_LINE           0X40
#define SET_SEGMENT_REMAP                0XA0 // COLUMN ADDR 0 MAPPED TO SEG0
#define SET_SEGMENT_REMAP_1              0XA1
#define SET_MULTIPLEX_RATIO              0XA8 
#define LEFT_RIGHT_OUTPUT_SCAN           0XC0 // SCAN FROM COM0-COM[N-1]
#define RIGHT_LEFT_OUTPUT_SCAN           0XC8 // SCAN FROM COM[N-1]-COM0
#define SET_DISPLAY_OFFSET               0XD3
#define SET_COM_PINS_HARDWARE            0XDA
//TIMING AND DRIVING
#define SET_DISPLAY_CLOCK                0XD5
#define SET_PRE_CHARGE                   0XD9
#define SET_VCOMH_DESELECT               0xDB
#define NOP_0                            0xE3
// NEWLY DEFINED
#define CHARGE_PUMP                      0x8D
#define EXTERNALVCC                      0x01
#define SWITCHCAPVCC                     0x02

void ssd1306_init(void);
void clear_display(void);
void command_mode(uint8_t command);
void data_mode(uint8_t data);
void row_col(uint8_t start_row, uint8_t start_col);
void scroll_init(char direction, uint8_t start_page, uint8_t end_page);

const char alpha[] = {
0x00, 0x00, 0x00, 0x00, 0x00, //space
0x00, 0x00, 0x5F, 0x00, 0x00, // !
0x00, 0x07, 0x00, 0x07, 0x00, // "
0x14, 0x7F, 0x14, 0x7F, 0x14, // #
0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
0x23, 0x13, 0x08, 0x64, 0x62, // %
0x36, 0x49, 0x56, 0x20, 0x50, // &
0x00, 0x08, 0x07, 0x03, 0x00, // '
0x00, 0x1C, 0x22, 0x41, 0x00, // (
0x00, 0x41, 0x22, 0x1C, 0x00, //  )
0x2A, 0x1C, 0x7F, 0x1C, 0x2A, // *
0x08, 0x08, 0x3E, 0x08, 0x08, // +
0x00, 0x80, 0x70, 0x30, 0x00, // ,
0x08, 0x08, 0x08, 0x08, 0x08, // -
0x00, 0x00, 0x60, 0x60, 0x00, // .
0x20, 0x10, 0x08, 0x04, 0x02, // /
0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
0x00, 0x42, 0x7F, 0x40, 0x00, // 1
0x72, 0x49, 0x49, 0x49, 0x46, // 2
0x21, 0x41, 0x49, 0x4D, 0x33, // 3
0x18, 0x14, 0x12, 0x7F, 0x10, // 4
0x27, 0x45, 0x45, 0x45, 0x39, // 5
0x3C, 0x4A, 0x49, 0x49, 0x31, // 6
0x41, 0x21, 0x11, 0x09, 0x07, // 7 
0x36, 0x49, 0x49, 0x49, 0x36, // 8
0x46, 0x49, 0x49, 0x29, 0x1E, // 9
0x00, 0x00, 0x14, 0x00, 0x00, // :
0x00, 0x40, 0x34, 0x00, 0x00, // ;
0x00, 0x08, 0x14, 0x22, 0x41, // <
0x14, 0x14, 0x14, 0x14, 0x14, // =
0x00, 0x41, 0x22, 0x14, 0x08, // >
0x02, 0x01, 0x59, 0x09, 0x06, // ?
0x3E, 0x41, 0x5D, 0x59, 0x4E,// '@'
0x7C, 0x12, 0x11, 0x12, 0x7C,// 'A'
0x7F, 0x49, 0x49, 0x49, 0x36,// 'B'
0x3E, 0x41, 0x41, 0x41, 0x22,// 'C'
0x7F, 0x41, 0x41, 0x41, 0x3E,// 'D'
0x7F, 0x49, 0x49, 0x49, 0x41,// 'E'
0x7F, 0x09, 0x09, 0x09, 0x01,// 'F'
0x3E, 0x41, 0x41, 0x51, 0x73,// 'G'
0x7F, 0x08, 0x08, 0x08, 0x7F,// 'H'
0x00, 0x41, 0x7F, 0x41, 0x00,// 'I'
0x20, 0x40, 0x41, 0x3F, 0x01,// 'J'
0x7F, 0x08, 0x14, 0x22, 0x41,// 'K'
0x7F, 0x40, 0x40, 0x40, 0x40,// 'L'
0x7F, 0x02, 0x1C, 0x02, 0x7F,// 'M'
0x7F, 0x04, 0x08, 0x10, 0x7F,// 'N'
0x3E, 0x41, 0x41, 0x41, 0x3E,// 'O'
0x7F, 0x09, 0x09, 0x09, 0x06,// 'P'
0x3E, 0x41, 0x51, 0x21, 0x5E,// 'Q'
0x7F, 0x09, 0x19, 0x29, 0x46 // 'R'
};

const char alpha1[] = {
0x26, 0x49, 0x49, 0x49, 0x32, // 'S'
0x03, 0x01, 0x7F, 0x01, 0x03, // 'T'
0x3F, 0x40, 0x40, 0x40, 0x3F, // 'U'
0x1F, 0x20, 0x40, 0x20, 0x1F, // 'V'
0x3F, 0x40, 0x38, 0x40, 0x3F, // 'W'
0x63, 0x14, 0x08, 0x14, 0x63, // 'X'
0x03, 0x04, 0x78, 0x04, 0x03, // 'Y'
0x61, 0x59, 0x49, 0x4D, 0x43, // 'Z'
0x00, 0x7F, 0x41, 0x41, 0x41, // '['
0x02, 0x04, 0x08, 0x10, 0x20, // '\'
0x00, 0x41, 0x41, 0x41, 0x7F, // ']'
0x04, 0x02, 0x01, 0x02, 0x04, // '^'
0x40, 0x40, 0x40, 0x40, 0x40, // '_'
0x00, 0x03, 0x07, 0x08, 0x00, // '`'
0x20, 0x54, 0x54, 0x78, 0x40, //'a'
0x7F, 0x28, 0x44, 0x44, 0x38,
0x38, 0x44, 0x44, 0x44, 0x28,
0x38, 0x44, 0x44, 0x28, 0x7F,
0x38, 0x54, 0x54, 0x54, 0x18,
0x00, 0x08, 0x7E, 0x09, 0x02,
0x18, 0xA4, 0xA4, 0x9C, 0x78,
0x7F, 0x08, 0x04, 0x04, 0x78,
0x00, 0x44, 0x7D, 0x40, 0x00,
0x20, 0x40, 0x40, 0x3D, 0x00,
0x7F, 0x10, 0x28, 0x44, 0x00,
0x00, 0x41, 0x7F, 0x40, 0x00,
0x7C, 0x04, 0x78, 0x04, 0x78,
0x7C, 0x08, 0x04, 0x04, 0x78,
0x38, 0x44, 0x44, 0x44, 0x38,
0xFC, 0x18, 0x24, 0x24, 0x18,
0x18, 0x24, 0x24, 0x18, 0xFC,
0x7C, 0x08, 0x04, 0x04, 0x08,
0x48, 0x54, 0x54, 0x54, 0x24,
0x04, 0x04, 0x3F, 0x44, 0x24,
0x3C, 0x40, 0x40, 0x20, 0x7C,
0x1C, 0x20, 0x40, 0x20, 0x1C, //v
0x3C, 0x40, 0x30, 0x40, 0x3C, //w
0x44, 0x28, 0x10, 0x28, 0x44, //x
0x4C, 0x90, 0x90, 0x90, 0x7C, //y
0x44, 0x64, 0x54, 0x4C, 0x44, //z
0x00, 0x08, 0x36, 0x41, 0x00, // '{'
0x00, 0x00, 0x77, 0x00, 0x00, // '|'
0x00, 0x41, 0x36, 0x08, 0x00, // '}'
0x02, 0x01, 0x02, 0x04, 0x02 // '~'
};
void oled_char(const char c);
void oled_string(char *msg);
void oled_space(uint8_t spacing);
void battery(uint8_t spacing, uint8_t percentage);
void fill_screen(void);
#endif
